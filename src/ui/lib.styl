//*** SHORTCUTS ************************************************************************************
b(n) { if n is 0 { font-weight: normal } else { font-weight: bold } }				// b:1 -> font-weight: bold;
i(n) { if n is 0 { font-style: normal } else { font-style: italic } }				// i:1 -> font-style: italic;
u(n) { if n is 0 { text-decoration: none } else { text-decoration: underline } }	// u:1 -> text-decoration: underline;

padding() { padding: joinArgs(arguments) }
padding-left(a) { padding-left: px(a) }
padding-right(a) { padding-right: px(a) }
padding-top(a) { padding-top: px(a) }
padding-bottom(a) { padding-bottom: px(a) }

margin() { margin: joinArgs(arguments) }
margin-left(a) { margin-left: px(a) }
margin-right(a) { margin-right: px(a) }
margin-top(a) { margin-top: px(a) }
margin-bottom(a) { margin-bottom: px(a) }

size(w, h=w) { width: px(w); height: px(h); }

width(n = 0) { width: px(n) }
min-width(n = 0) { min-width: px(n) }
max-width(n = 0) { max-width: px(n) }

height(n = 0) { height: px(n) }
min-height(n = 0) { min-height: px(n) }
max-height(n = 0) { max-height: px(n) }

top(n = 0) { top: px(n) }
right(n = 0) { right: px(n) }
left(n = 0) { left: px(n) }
bottom(n = 0) { bottom: px(n) }

z(n = 0) { z-index: n }
//*** SHORTCUTS ************************************************************************************


font()
	if length(arguments) is 3 and type(arguments[1]) is 'literal'	// font: 12/2 -> font-size: 12px; line-height: 2
		font-size: px(arguments[0]);
		line-height: arguments[2]
	else if length(arguments) is 1									// font: 13 -> font-size: 13px;
		if type(arguments[0]) == 'unit'
			font-size: px(arguments[0]);
		else
			font: arguments;
	else															// use native font
		font: arguments;



border-radius() { border-radius: joinArgs(arguments); }





//*** GENERIC HELPERS ******************************************************************************
px(a)
	if type(a) == 'unit'
		if unit(a) == 'px' || a == 0 { return a } else { return (a + 0px) }
	else
		return a

// Joins arguments with space and adds "px" to values if needed
joinArgs(args)
	buf = ''
	for arg, i in args
		if i { buf += ' ' + px(arg)	} else { buf += px(arg) }
	return unquote(buf)
//*** GENERIC HELPERS ******************************************************************************
